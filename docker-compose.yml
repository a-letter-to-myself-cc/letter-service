# docker-compose.yml

version: '3.8'

services:
  # Letter Service  #
  letter-service:
    build:
      context: . # 현재 디렉토리(letter-service 레포 루트)의 Dockerfile 사용
    container_name: letter_service_app
    ports:
      - "8006:8000" # 호스트 8006 <-> 컨테이너 8000 (Dockerfile CMD가 8000을 사용한다고 가정)
    env_file:
      - ./.env # letters-service 컨테이너의 환경 변수
    volumes:
      - .:/app # 개발 중 코드 변경 실시간 반영 (선택 사항)
    depends_on:
      letters-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - letter_network # 이 Compose 파일 내 서비스들이 사용할 네트워크

  # PostgreSQL DB for Letters Service #
  letters-db:
    image: postgres:14-alpine
    container_name: letters_db_instance
    environment:
      POSTGRES_DB: ${POSTGRES_DB_FOR_LETTERS_SVC} # .env 파일에서 값을 가져옴
      POSTGRES_USER: ${POSTGRES_USER_FOR_LETTERS_SVC}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_FOR_LETTERS_SVC}
    volumes:
      - letters_db_volume:/var/lib/postgresql/data # 데이터 영속성
    ports:
      - "5436:5432" # 호스트에서 DB 직접 접근 시 사용 (선택 사항)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_FOR_LETTERS_SVC} -d ${POSTGRES_DB_FOR_LETTERS_SVC}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - letter_network

  # RabbitMQ Service #
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq_instance
    ports:
      - "5673:5672"   # AMQP 프로토콜 포트 (호스트 포트를 겹치지 않게 5673으로 변경 가능)
      - "15673:15672" # RabbitMQ 관리자 웹 UI (호스트 포트를 겹치지 않게 15673으로 변경 가능)
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER} # .env 파일에서 값을 가져옴
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - letter_network

# Docker 볼륨 정의
volumes:
  letters_db_volume: # letters-db 서비스에서 사용

# 이 Compose 파일 내 서비스들이 사용할 공용 네트워크 정의
networks:
  letter_network:
    driver: bridge